@startuml class_overview
component ActorObject{
namespace Unity{
    class BoxCollider2D
    {

    }
    class InputSystem 
    {
    }

/' ++++++++++ NOTES ++++++++++ '/
note top of BoxCollider2D
    used only for
    simple character size configuration
    can be changed
end note

note top of InputSystem
    based on observer pattern
end note
/' --------- NOTES ----------- '/

}

namespace actorCollision{

    class CollisionInfo 
    {
        + skinWidth: property
    }

    class CollisionDetection 
    {
        - collider: BoxCollider2D 
        + collisionInfo: CollisionInfo - readonly
        + ApplyCollisions(velocity&: Vector2)
        - ApplyHorizontalCollisions(velocity&: Vector2)
        - ApplyVerticalCollisions(velocity&: Vector2)
    }

    CollisionDetection *- CollisionInfo

/' ++++++++++ NOTES ++++++++++ '/
note left of CollisionDetection::collider
    Initialized by GetComponent<>()
end note
/' --------- NOTES ----------- '/

}

namespace actorController{

    class ActorController
    {
        - collisionDetection : CollisionDetection
        - currentState
        - List<IDisplace&>
        - List<IActorState>
        - OnGameUpdate(): Unity function
        + AddDisplacement(IDisplace&)
        + ResetVelocity()
        + ChangeState(IActorState&)
        + AddState(IActorState) /'debatable if nessesery'/
        + GetStates(): Array<readonly IActorState&>
    }


/' ++++++++++ NOTES ++++++++++ '/
note right of ActorController::List<IDisplace&>
    reset on every state Update()
end note

note right of ActorController::OnGameUpdate
    Calls the state's Update() and Collision detection
    and after that, moves the actor
end note
/' --------- NOTES ----------- '/

}

namespace UserClassesDisplacement{
    interface IDisplace
    {
        - ActorController& charController
        + displacement : Vector2 - Parameter
        + SetDisplacement()
        + GetDisplacement(): Vector2
    }

    class Locomotion implements IDisplace
    {
        + Move()
    }
    class Jump  implements IDisplace
    {
        + Jump()
    }

    Unity.InputSystem *--> IDisplace
    IDisplace --> actorController.ActorController

/' ++++++++++ NOTES ++++++++++ '/
note left of IDisplace::SetDisplacement
    Set the displacement vector 
    preferabley trhu Unity InputSystem
end note
/' --------- NOTES ----------- '/
}

namespace UserClassesStates{
    interface IActorState
    {
        - ActorController&
        + Initial(ActorController& controller)
        + Update(List<IDisplace&>)
        + OnStateChange()
    }

    class GroundedState implements IActorState
    {

    }

    class AirBorn implements IActorState
    {

    }

    actorController.ActorController *-d- IActorState
}

actorCollision.CollisionDetection *-- actorController.ActorController

actorCollision.CollisionDetection -u-> Unity.BoxCollider2D



/' ++++++++++ NOTES ++++++++++ '/

note top of actorCollision.CollisionDetection
    HorizontalCheck then VerticalCheck
end note

note top of UserClassesDisplacement
    classes that will modify the public "displacement" Vector
end note

note as IDisplaceIActorStateNote
    Player input decides what IDisplace classes are modified and stored in ActorController
    and then used by the currentState
end note 

UserClassesDisplacement -- IDisplaceIActorStateNote
UserClassesStates -- IDisplaceIActorStateNote
actorController.ActorController -- IDisplaceIActorStateNote

/' --------- NOTES ----------- '/

}
@enduml

@startuml Movement

:gather input;

@enduml

@startuml collisionOverview

start
:Update Boxcast Origins;
:Apply Horizontal Collsion;
:Apply Vertical Collision;
stop

@enduml


@startuml ApplyHorizontalCollision

start

stop

@enduml

@startuml ApplyVerticalCollision

start

stop

@enduml